# 1 "gen12lp_conv_fwd_data_u8s8s32x.cl"
# 1 "<built-in>" 1
# 1 "<built-in>" 3
# 382 "<built-in>" 3
# 1 "<command line>" 1
# 1 "<built-in>" 2
# 1 "gen12lp_conv_fwd_data_u8s8s32x.cl" 2
# 17 "gen12lp_conv_fwd_data_u8s8s32x.cl"
# 1 "../ocl/ocl_math_utils.h" 1
# 20 "../ocl/ocl_math_utils.h"
ushort convert_f32_to_bf16(float f) {
    uint i = as_uint(f);
    i += 0x00007FFF + ((i & 0x10000) >> 16);
    ushort2 r = as_ushort2(i);
    return r[1];
}

float convert_bf16_to_f32(ushort b) {
    ushort2 r = {0, b};
    float f = as_float(r);
    return f;
}
# 107 "../ocl/ocl_math_utils.h"
uint subgroup_block_read_uint(const __local uint *p) {
    uint ret;
    uint idx = get_sub_group_local_id();
    ret = p[idx];
    return ret;
}

uint8 subgroup_block_read_uint8(const __local uint *p) {
    uint8 ret;
    uint idx = get_sub_group_local_id();
    ret.s0 = p[idx];
    idx += get_max_sub_group_size();
    ret.s1 = p[idx];
    idx += get_max_sub_group_size();
    ret.s2 = p[idx];
    idx += get_max_sub_group_size();
    ret.s3 = p[idx];
    idx += get_max_sub_group_size();
    ret.s4 = p[idx];
    idx += get_max_sub_group_size();
    ret.s5 = p[idx];
    idx += get_max_sub_group_size();
    ret.s6 = p[idx];
    idx += get_max_sub_group_size();
    ret.s7 = p[idx];
    return ret;
}

void subgroup_block_write_uint(__local uint *p, uint v) {
    uint idx = get_sub_group_local_id();
    p[idx] = v;
}

void subgroup_block_write_uint2(__local uint *p, uint2 v) {
    uint idx = get_sub_group_local_id();
    p[idx] = v.s0;
    p += get_max_sub_group_size();
    p[idx] = v.s1;
}

void subgroup_block_write_uint4(__local uint *p, uint4 v) {
    uint idx = get_sub_group_local_id();
    p[idx] = v.s0;
    p += get_max_sub_group_size();
    p[idx] = v.s1;
    p += get_max_sub_group_size();
    p[idx] = v.s2;
    p += get_max_sub_group_size();
    p[idx] = v.s3;
}

void subgroup_block_write_uint8(__local uint *p, uint8 v) {
    uint idx = get_sub_group_local_id();
    p[idx] = v.s0;
    p += get_max_sub_group_size();
    p[idx] = v.s1;
    p += get_max_sub_group_size();
    p[idx] = v.s2;
    p += get_max_sub_group_size();
    p[idx] = v.s3;
    p += get_max_sub_group_size();
    p[idx] = v.s4;
    p += get_max_sub_group_size();
    p[idx] = v.s5;
    p += get_max_sub_group_size();
    p[idx] = v.s6;
    p += get_max_sub_group_size();
    p[idx] = v.s7;
}

inline int mmad_4(uchar4 input, char4 weight, int acc)
        __attribute__((overloadable)) {
    acc += (input[0] * weight[0]);
    acc += (input[1] * weight[1]);
    acc += (input[2] * weight[2]);
    acc += (input[3] * weight[3]);
    return acc;
}

inline int mmad_4(char4 input, char4 weight, int acc)
        __attribute__((overloadable)) {
    acc += (input[0] * weight[0]);
    acc += (input[1] * weight[1]);
    acc += (input[2] * weight[2]);
    acc += (input[3] * weight[3]);
    return acc;
}

inline int mmad8(int8 A_scalars, int8 B_vectors, int acc)
        __attribute__((overloadable)) {
    acc = mmad_4(as_char4(A_scalars[0]), as_char4(B_vectors[0]), acc);
    acc = mmad_4(as_char4(A_scalars[1]), as_char4(B_vectors[1]), acc);
    acc = mmad_4(as_char4(A_scalars[2]), as_char4(B_vectors[2]), acc);
    acc = mmad_4(as_char4(A_scalars[3]), as_char4(B_vectors[3]), acc);
    acc = mmad_4(as_char4(A_scalars[4]), as_char4(B_vectors[4]), acc);
    acc = mmad_4(as_char4(A_scalars[5]), as_char4(B_vectors[5]), acc);
    acc = mmad_4(as_char4(A_scalars[6]), as_char4(B_vectors[6]), acc);
    acc = mmad_4(as_char4(A_scalars[7]), as_char4(B_vectors[7]), acc);
    return acc;
}

inline int mmad8(uint8 A_scalars, int8 B_vectors, int acc)
        __attribute__((overloadable)) {
    acc = mmad_4(as_uchar4(A_scalars[0]), as_char4(B_vectors[0]), acc);
    acc = mmad_4(as_uchar4(A_scalars[1]), as_char4(B_vectors[1]), acc);
    acc = mmad_4(as_uchar4(A_scalars[2]), as_char4(B_vectors[2]), acc);
    acc = mmad_4(as_uchar4(A_scalars[3]), as_char4(B_vectors[3]), acc);
    acc = mmad_4(as_uchar4(A_scalars[4]), as_char4(B_vectors[4]), acc);
    acc = mmad_4(as_uchar4(A_scalars[5]), as_char4(B_vectors[5]), acc);
    acc = mmad_4(as_uchar4(A_scalars[6]), as_char4(B_vectors[6]), acc);
    acc = mmad_4(as_uchar4(A_scalars[7]), as_char4(B_vectors[7]), acc);
    return acc;
}

inline int4 mmad8x4(uint4 A_vectors, int8 B_vectors, int4 acc)
        __attribute__((overloadable)) {
    int4 ret;
    for (uint i = 0; i < 4; i++) {
        uint8 A_scalars;
        A_scalars.s0 = sub_group_broadcast(A_vectors[i], 0);
        A_scalars.s1 = sub_group_broadcast(A_vectors[i], 1);
        A_scalars.s2 = sub_group_broadcast(A_vectors[i], 2);
        A_scalars.s3 = sub_group_broadcast(A_vectors[i], 3);
        A_scalars.s4 = sub_group_broadcast(A_vectors[i], 4);
        A_scalars.s5 = sub_group_broadcast(A_vectors[i], 5);
        A_scalars.s6 = sub_group_broadcast(A_vectors[i], 6);
        A_scalars.s7 = sub_group_broadcast(A_vectors[i], 7);
        ret[i] = mmad8(A_scalars, B_vectors, acc[i]);
    }
    return ret;
}

inline int4 mmad8x4(int4 A_vectors, int8 B_vectors, int4 acc)
        __attribute__((overloadable)) {
    int4 ret;
    for (uint i = 0; i < 4; i++) {
        int8 A_scalars;
        A_scalars.s0 = sub_group_broadcast(A_vectors[i], 0);
        A_scalars.s1 = sub_group_broadcast(A_vectors[i], 1);
        A_scalars.s2 = sub_group_broadcast(A_vectors[i], 2);
        A_scalars.s3 = sub_group_broadcast(A_vectors[i], 3);
        A_scalars.s4 = sub_group_broadcast(A_vectors[i], 4);
        A_scalars.s5 = sub_group_broadcast(A_vectors[i], 5);
        A_scalars.s6 = sub_group_broadcast(A_vectors[i], 6);
        A_scalars.s7 = sub_group_broadcast(A_vectors[i], 7);
        ret[i] = mmad8(A_scalars, B_vectors, acc[i]);
    }
    return ret;
}

inline int8 mmad8x8(uint8 A_vectors, int8 B_vectors, int8 acc)
        __attribute__((overloadable)) {
    int8 ret;
    for (uint i = 0; i < 8; i++) {
        uint8 A_scalars;
        A_scalars.s0 = sub_group_broadcast(A_vectors[i], 0);
        A_scalars.s1 = sub_group_broadcast(A_vectors[i], 1);
        A_scalars.s2 = sub_group_broadcast(A_vectors[i], 2);
        A_scalars.s3 = sub_group_broadcast(A_vectors[i], 3);
        A_scalars.s4 = sub_group_broadcast(A_vectors[i], 4);
        A_scalars.s5 = sub_group_broadcast(A_vectors[i], 5);
        A_scalars.s6 = sub_group_broadcast(A_vectors[i], 6);
        A_scalars.s7 = sub_group_broadcast(A_vectors[i], 7);
        ret[i] = mmad8(A_scalars, B_vectors, acc[i]);
    }
    return ret;
}

inline int8 mmad8x8(int8 A_vectors, int8 B_vectors, int8 acc)
        __attribute__((overloadable)) {
    int8 ret;
    for (uint i = 0; i < 8; i++) {
        int8 A_scalars;
        A_scalars.s0 = sub_group_broadcast(A_vectors[i], 0);
        A_scalars.s1 = sub_group_broadcast(A_vectors[i], 1);
        A_scalars.s2 = sub_group_broadcast(A_vectors[i], 2);
        A_scalars.s3 = sub_group_broadcast(A_vectors[i], 3);
        A_scalars.s4 = sub_group_broadcast(A_vectors[i], 4);
        A_scalars.s5 = sub_group_broadcast(A_vectors[i], 5);
        A_scalars.s6 = sub_group_broadcast(A_vectors[i], 6);
        A_scalars.s7 = sub_group_broadcast(A_vectors[i], 7);
        ret[i] = mmad8(A_scalars, B_vectors, acc[i]);
    }
    return ret;
}

ushort8 convert_f32_to_bf16_vec8(float8 f) {
    ushort8 r;
    for (int i = 0; i < 8; i++) {
        r[i] = convert_f32_to_bf16(f[i]);
    }
    return r;
}

float8 convert_bf16_to_f32_vec8(ushort8 b) {
    float8 f;
    for (int i = 0; i < 8; i++) {
        f[i] = convert_bf16_to_f32(b[i]);
    }
    return f;
}
# 18 "gen12lp_conv_fwd_data_u8s8s32x.cl" 2
# 1 "../ocl/ocl_types.h" 1
# 19 "gen12lp_conv_fwd_data_u8s8s32x.cl" 2

void __attribute__((overloadable))
intel_sub_group_block_write_uc16(__global uchar *p, uchar16 data);

__attribute__((intel_reqd_sub_group_size(8)))
__attribute__((reqd_work_group_size(16, 1, 1))) __kernel void
conv_fwd_u8s8s32x_kernel(const __global uchar *src, const __global char *wei,
        const __global float *bias, __global char *dst, float alpha, float beta,
        float sum_scale, float scales) {

    const int mb_blocks = 2;

    const int group_oc = get_group_id(0) * 2;
    const int group_mb = get_group_id(2) * 1 / mb_blocks;
    const int group_sp = get_group_id(1) * 1;

    const int mb = get_group_id(2) % mb_blocks;
    const int sub_group_id = get_sub_group_id();
    const int oc = (sub_group_id % 2);
    const int sp = (sub_group_id / 2);

    const int g = (group_oc + oc) / 8;
    const int group_ic = 8 * g;

    const int god = group_sp / (11 * 9);
    const int gohw = group_sp % (11 * 9);
    const int goh = gohw / 11;
    const int gow = gohw % 11;

    const int gid = god * 1;
    const int gih = goh * 1;
    const int giw = gow * 1;

    const int local_oh = sp / 11;
    const int local_ow = sp % 11;
    const int local_ih = local_oh * 1;
    const int local_iw = local_ow * 1;

    const int od = god;
    const int ow = gow + local_ow;
    const int oh = goh + local_oh;
    const int id = gid - 1;
    const int iw = giw + local_iw - 1;
    const int ih = gih + local_ih - 1;

    dst += 32 * 13 * 9 * 11 * 32 * (group_oc + oc);
    dst += 32 * 13 * 9 * 11 * 8 * 1 * 32 * group_mb;
    dst += 32 * 32 / mb_blocks * mb;
    dst += 32 * 32 * (11 * 9 * od + 11 * oh + ow);

    src += 32 * 11 * 7 * 9 * 32 * group_ic;
    src += 32 * 11 * 7 * 9 * 8 * 1 * 32 * group_mb;
    src += 32 * 32 / mb_blocks * mb;
    src += 32 * 32 * (9 * 7 * id + 9 * ih + iw);

    wei += 32 * 1 * 1 * 1 * 32 * (group_oc + oc) * 8;

    int8 C00 = 0, C01 = 0, C02 = 0, C03 = 0;
    int8 C10 = 0, C11 = 0, C12 = 0, C13 = 0;
    int8 C20 = 0, C21 = 0, C22 = 0, C23 = 0;
    int8 C30 = 0, C31 = 0, C32 = 0, C33 = 0;

    __attribute__((opencl_unroll_hint)) for (int ic_chunk = 0; ic_chunk < 8;
                                             ic_chunk++) {

        uint8 S0, S1, S2, S3;
        int8 W0, W1, W2, W3;
# 125 "gen12lp_conv_fwd_data_u8s8s32x.cl"
        S0 = intel_sub_group_block_read8((__global uint *)&src[0]);
        ;

        W0 = as_int8(intel_sub_group_block_read8((__global uint *)&wei[0]));
        ;
        W1 = as_int8(
                intel_sub_group_block_read8((__global uint *)&wei[8 * 32]));
        ;
        W2 = as_int8(
                intel_sub_group_block_read8((__global uint *)&wei[16 * 32]));
        ;
        W3 = as_int8(
                intel_sub_group_block_read8((__global uint *)&wei[24 * 32]));
        ;
        C00 = mmad8x8(S0, W0, C00);
        C01 = mmad8x8(S0, W1, C01);
        C02 = mmad8x8(S0, W2, C02);
        C03 = mmad8x8(S0, W3, C03);
# 160 "gen12lp_conv_fwd_data_u8s8s32x.cl"
        src += 32 * 32 * (1 + 0);
        wei += 32 * 32;

        src += 32 * 32 * (9 * (1 + 0) - 1 * (1 + 0));

        src += 32 * 32 * (7 * (1 + 0) - 1 * (1 + 0)) * 9;

        src += 32 * 32 * (11 - 1 * (1 + 0)) * 7 * 9;
    }

    float4 tmp;
    uint8 dst_pack;
    uchar16 d1;
    uchar16 d2;
    uint8 D0, D1, D2, D3;

    float4 bia = as_float4(intel_sub_group_block_read4(
            (__global uint *)&bias[(group_oc + oc) * 32]));
    bia *= scales;
# 274 "gen12lp_conv_fwd_data_u8s8s32x.cl"
    do {
        for (int n_i = 0; n_i < 4; n_i++) {
            do {
                tmp[0] = C00[n_i];
                tmp[1] = C01[n_i];
                tmp[2] = C02[n_i];
                tmp[3] = C03[n_i];
            } while (0);
            tmp = fma(tmp, (float4)scales, bia);
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            do {
                d1[(n_i)*4] = convert_char_sat_rte(tmp.s0);
                d1[(n_i)*4 + 1] = convert_char_sat_rte(tmp.s1);
                d1[(n_i)*4 + 2] = convert_char_sat_rte(tmp.s2);
                d1[(n_i)*4 + 3] = convert_char_sat_rte(tmp.s3);
            } while (0);
        }
        for (int n_i = 4; n_i < 8; n_i++) {
            do {
                tmp[0] = C00[n_i];
                tmp[1] = C01[n_i];
                tmp[2] = C02[n_i];
                tmp[3] = C03[n_i];
            } while (0);
            tmp = fma(tmp, (float4)scales, bia);
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            do {
                d2[(n_i - 4) * 4] = convert_char_sat_rte(tmp.s0);
                d2[(n_i - 4) * 4 + 1] = convert_char_sat_rte(tmp.s1);
                d2[(n_i - 4) * 4 + 2] = convert_char_sat_rte(tmp.s2);
                d2[(n_i - 4) * 4 + 3] = convert_char_sat_rte(tmp.s3);
            } while (0);
        }
        intel_sub_group_block_write_uc16((__global uchar *)&dst[0 * 32], d1);
        intel_sub_group_block_write_uc16(
                (__global uchar *)&dst[0 * 32 + 16 * 8], d2);
    } while (0);
}
